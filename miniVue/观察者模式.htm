<script>
    // 观察者模式 是由具体目标调度,比如当事件触发,Dep就回去调用观察者的方法,所以观察者模式的订阅者与发布者之间是存在依赖的
    // 发布/订阅模式由统一调度中心调用,因此发布者和订阅者不需要知道对方的存在
    // 发布者-目标
    class Dep {
        constructor() {
                // 记录所有的订阅者
                this.subs = []
            }
            // 添加订阅者
        addSub(sub) {
                if (sub && sub.update) {
                    this.subs.push(sub)
                }
            }
            // 发布通知
        notify() {
            this.subs.forEach(sub => {
                sub.update()
            })
        }
    }
    // 订阅者-观察者
    class Watcher {
        update() {
            console.log("update")
        }
    }
    // 测试
    let dep = new Dep()
    let watcher = new Watcher()

    dep.addSub(watcher)

    dep.notify()
</script>